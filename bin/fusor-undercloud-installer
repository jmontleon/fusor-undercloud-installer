#!/bin/bash

usage () {
    echo
    echo "fusor-undercloud-installer [--non-interactive] [--answer-file=FILENAME] [--skip-validations] [--help]"
    echo
    exit 1
}

fusor_undercloud_install() {

  if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root"
   exit 1
  fi

  interactive=true
  skip_system_validations=false
  # Check if we are in non-interactive mode
  # Check if validations on system requirements should be skipped.
  while test $# -gt 0
  do
    case "$1" in
      --non-interactive)
        CONF_FILE='/etc/fusor-undercloud-installer/fusor-undercloud-installer.answers.yaml'
        interactive=false
        ;;
      --answer-file=*)
        CONF_FILE="${1#*=}"
        interactive=false
        ;;
      --skip-validations)
        skip_system_validations=true
        ;;
      --help)
        skip_system_validations=true
        usage
        ;;
      *) echo 'Invalid argument... staying in interactive mode'
        ;;
    esac
    shift
  done

  # Check if configuration file exists
  if [ $interactive == false ]; then
    if [ -f $CONF_FILE ]; then
      echo "Running in non-interactive mode using answer file: $CONF_FILE "
    else
      echo "Answer file not found... Exiting."
      exit
    fi
  fi
  export CONF_FILE

  # Check if --skip-validations option was supplied
  if [ $skip_system_validations == false ]; then
    echo
    # 8 cores required, 8 recommended
    check_cpu_cores 8 8
    # 16 gb ram required, 16 gb recommended
    check_ram 16 16
    # 40 gb disk space at '/' required, 100 gb recommended
    check_disk_space 40 100 "/"
    echo
  fi

  # create stack user, become her
  id -u stack >/dev/null 2>&1
  if [ $? -ne 0 ]; then
    useradd stack
  fi
  echo "stack ALL=(root) NOPASSWD:ALL" >> /etc/sudoers.d/stack
  chmod 0440 /etc/sudoers.d/stack

  sudo -u stack mkdir -p /home/stack/images
  sudo -u stack mkdir -p /home/stack/templates

  # Create a stupid bogus yum repo so that yum won't exit with an error status
  # during the undercloud install
  mkdir -p /tmp/repodata

  echo '<metadata packages="2"><package type="rpm"><name>mysql-libs</name><arch>x86_64</arch><version epoch="0" ver="5.4" rel="1"/><checksum type="sha" pkgid="YES">94099f245daf064eebd591023af87c891eaaa291</checksum><summary>Fake package to make yum dependency resolution work</summary></package><package type="rpm"><name>mysql-devel</name><arch>x86_64</arch><version epoch="0" ver="5.4" rel="1"/><checksum type="sha" pkgid="YES">94099f245daf064eebd591023af87c891eaaa291</checksum><summary>Fake package to make yum dependency resolution work</summary></package></metadata>' > /tmp/repodata/primary.xml

  echo '<filelists packages="2"><package name="mysql-libs" arch="x86_64"><version epoch="0" ver="5.4" rel="1"/></package><package name="mysql-devel" arch="x86_64"><version epoch="0" ver="5.4" rel="1"/></package></filelists>' > /tmp/repodata/filelists.xml

  echo '<repomd><revision>1</revision><data type="primary"><checksum type="sha">7a221b9483a86c65378d744ca9f075b7afd25a03</checksum><location href="repodata/primary.xml"/></data><data type="filelists"><checksum type="sha">66fc42e40a9504c889b9b217f71e0a02abb1f454</checksum><location href="repodata/filelists.xml"/></data></repomd>' > /tmp/repodata/repomd.xml

  echo "[fake-repo-to-make-yum-happy]
name=fake-repo-to-make-yum-happy
baseurl=file:///tmp
enabled=1" > /etc/yum.repos.d/fake.repo

  # Exit if this stuff doesn't go right
  set -e

  # enable IP forwarding
  if grep -q "net.ipv4.ip_forward" /etc/sysctl.conf
  then
      sed -i 's/net.ipv4.ip_forward[ ]*=[ ]*0/net.ipv4.ip_forward = 1/' /etc/sysctl.conf
  else
      echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
  fi
  sysctl -p /etc/sysctl.conf

  ValidHostnameRegex='(?=^.{1,254}$)(^(?>(?!\d+\.)[a-zA-Z0-9_\-]{1,63}\.?)+(?:[a-zA-Z]{2,})$)'
  ValidIpAddressRegex='^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'
  ValidInput=false

  # BZ 1306032: to handle empty input, we can't use the same variable as the
  # prompt. And using the environment $HOSTNAME as the variable is not a good
  # idea.
  HOSTPROMPT=$HOSTNAME
  while [ $ValidInput == false ]; do
    if [ $interactive == true ]; then
      read -e -p "Set your resolvable Fully Qualified Domain Name: " -i $HOSTPROMPT HOST
    else
      # Grab the desired hostname from answer file
      HOST=`grep ^hostname $CONF_FILE | awk '{print $2}'`
    fi

    if [[ `echo $HOST | grep -P $ValidHostnameRegex` ]]
    then
      echo "Hostname is in valid format, setting hostname"
      ValidInput=true
    else
      # when input is not empty, use input as prompt
      # by default prmopt is last non-empty value
      if [ "$HOST" != "" ]; then
        HOSTPROMPT=$HOST
      fi
      echo "Specified hostname is not valid"
      if [ $interactive == false ]; then
        exit
      fi
    fi
  done

  hostnamectl set-hostname $HOST
  hostnamectl set-hostname --transient $HOST
  # In case we're running this installer again, delete any previous entries
  sed -i '/fusor-undercloud-installer/,+1d' /etc/hosts
  echo "# fusor-undercloud-installer managed:" >> /etc/hosts
  echo "127.0.0.1 $HOST `hostname -s`" >> /etc/hosts

  ValidInput=false
  # Ask for DNS server and set it if not already in resolv.conf
  NAMESERVER=`grep ^nameserver /etc/resolv.conf | head -1 |awk '{print $2}'`
  if [ -z $NAMESERVER ]; then NAMESERVER='127.0.0.1'; fi

  NAMESERVERPROMPT=$NAMESERVER
  while [ $ValidInput == false ]; do
    if [ $interactive == true ]; then
      read -e -p "Enter the DNS nameserver's IP address to use for the Overcloud: " -i $NAMESERVERPROMPT NAMESERVER
    else
      NAMESERVER=`grep ^nameserver $CONF_FILE | awk '{print $2}'`
    fi
    if [[ $NAMESERVER =~ $ValidIpAddressRegex ]]
    then
      FailedCheck=false
      for i in 1 2 3 4; do
        if [ $(echo "$NAMESERVER" | cut -d. -f$i) -gt 255 ]; then
          echo "Specified nameserver is not a valid IP address"
          NAMESERVERPROMPT=$NAMESERVER
          FailedCheck=true
          break
        fi
      done
      if [ $FailedCheck == false ]; then
        echo "Nameserver IP address is valid"
        ValidInput=true
      fi
    else
      # when input is not empty, use input as prompt
      # by default prmopt is last non-empty value
      if [ "$NAMESERVER" != "" ]; then
        NAMESERVERPROMPT=$NAMESERVER
      fi
      echo "Specified nameserver is not a valid IP address"
      if [ $interactive == false ]; then
        exit
      fi
    fi
  done

  grep -q $NAMESERVER /etc/resolv.conf || echo "nameserver $NAMESERVER" >> /etc/resolv.conf

  # Store public ip address for later
  # If there's an error, the next call to configurator will print it
  # let's not exit this script here because the error will not be printed
  set +e
  MYADDR=`fusor-undercloud-configurator get-addr`
  set -e

  # Prompt user for network setup and write the undercloud config file
  sudo -E -u stack python -u /usr/sbin/fusor-undercloud-configurator

  # call out to egon to run the undercloud installer
  cd /home/stack
  sudo -u stack scl enable ruby193 "undercloud-install-local.rb" # call egon to do the install

  # Delete the stupid bogus repo
  rm -rf /tmp/repodata
  rm -f /etc/yum.repos.d/fake.repo

  # set undercloud discoverd timeout value to a more sane value
  grep -q "^timeout" /etc/ironic-discoverd/discoverd.conf || sed -i.orig 's/\[discoverd\]/&\ntimeout = 300/' /etc/ironic-discoverd/discoverd.conf

  # untar the overcloud images
  echo "Importing Overcloud images."
  cd /home/stack/images
  for a in `ls -1 /root/images/*.tar`; do
    tar -xf $a
  done
  chown stack:stack /home/stack/images/*

  # Upload the overcloud images
  cd /home/stack/images
  source /home/stack/stackrc
  openstack overcloud image upload

  # Set DNS server
  NETWORK_ID=`neutron subnet-list | grep start | awk '{print $2}'`
  neutron subnet-update $NETWORK_ID --dns-nameserver $NAMESERVER

  # Echo out ip addr and password
  echo "Installation complete!"
  echo
  echo "Your IP Address is:"
  python -c "import netifaces as ni; print ni.ifaddresses('br-ctlplane')[2][0]['addr']"
  echo "Make a note of this for the RHCI web UI."
}

check_cpu_cores() {
  # Check if machine has enough CPU cores
  cores_required=$1
  cores_recommended=$2

  intro_message="Checking CPU cores..."
  cores_found=$(nproc)

  # condition: CPU core count recommendation met
  if [ $cores_found -ge $cores_recommended ]; then
    print_with_outcome "$intro_message" "$cores_found cores" true
  # condition: CPU core count minimum requirement met
  elif [ $cores_found -ge $cores_required ]; then
    print_with_outcome "$intro_message" "$cores_found cores" true
    echo $cores_required cores required, $cores_recommended recommended.
  # condition: CPU core count insufficient
  else
    print_with_outcome "$intro_message" "$cores_found cores" false
    echo $cores_required cores required, $cores_recommended recommended.
    if [ "$interactive" == true ]; then
      read -p "Proceed without meeting CPU core requirement? (y/n) " -r
    else
      REPLY="n"
    fi
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo && echo "To skip system validations, run fusor-undercloud-installer with '--skip_validations'."
      echo Exiting...
      echo && exit 1
    fi
  fi
}

check_ram() {
  # System memory check
  gb_ram_required=$1    # required system memory in gigabytes
  gb_ram_recommended=$2 # recommended system memory in gigabytes

  let mb_ram_required=gb_ram_required*1024
  let mb_ram_recommended=gb_ram_recommended*1024

  intro_message="Checking RAM size..."

  # dmidecode -t 17 gives a listing of installed RAM modules
  mb_ram_found=0
  for i in $( sudo dmidecode -t 17 | awk '/Size:/ {print $2}' ); do
    let mb_ram_found=mb_ram_found+i
  done

  # condition: RAM recommendation met
  if [ $mb_ram_found -ge $mb_ram_recommended ]; then
    print_with_outcome "$intro_message" "$mb_ram_found MB" true
  # condition: RAM minimum requirement met
  elif [ $mb_ram_found -ge $mb_ram_required ]; then
    print_with_outcome "$intro_message" "$mb_ram_found MB" true
    echo $mb_ram_required MB RAM required, $mb_ram_recommended MB recommended.
  # condition: RAM insufficient
  else
    print_with_outcome "$intro_message" "$mb_ram_found MB" false
    echo $mb_ram_required MB RAM required, $mb_ram_recommended MB recommended.
    if [ "$interactive" == true ]; then
      read -p "Proceed without meeting RAM requirement? (y/n) " -r
    else
      REPLY="n"
    fi
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo && echo "To skip system validations, run fusor-undercloud-installer with '--skip_validations'."
      echo Exiting...
      echo && exit 1
    fi
  fi
}

check_disk_space() {
  # Verify disk space available at directory_to_check
  disk_space_required=$1     # required disk space in gigabytes
  disk_space_recommended=$2  # recommended disk space in gigabytes
  directory_to_check=$3      # directory to check for disk space

  intro_message="Checking '$directory_to_check'..."
  root_size_gb=$(df -BG $3 | awk '/\// {print $2}' | egrep -o '[0-9]+')

  # condition: Disk size recommendation met
  if [ $root_size_gb -ge $disk_space_recommended ]; then
    print_with_outcome "$intro_message" "$root_size_gb GB" true
  # condition: Disk size minimum requirement met
  elif [ $root_size_gb -ge $disk_space_required ]; then
    print_with_outcome "$intro_message" "$root_size_gb GB" true
    echo $disk_space_required GB disk space required, $disk_space_recommended GB recommended.
  # condition: Disk size insufficient
  else
    print_with_outcome "$intro_message" "$root_size_gb GB" false
    echo $disk_space_required GB disk space required, $disk_space_recommended GB recommended.
    if [ "$interactive" == true ]; then
      read -p "Proceed without meeting disk space requirement? (y/n) " -r
    else
      REPLY="n"
    fi
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo && echo "To skip system validations, run fusor-undercloud-installer with '--skip_validations'."
      echo Exiting...
      echo && exit 1
    fi
  fi
}

print_with_outcome() {
  # Print a status message with OK or FAILED
  outcome_message=$1  # message to print
  outcome_amount=$2   # amount of resource found
  outcome_status=$3   # true = OK, false = FAILED

  if [ "$outcome_status" = true ] ; then
    printf "%-23s %-10s \e[32m%-5s\e[0m\n" "$outcome_message" "$outcome_amount" "[  OK  ]"
  else
    printf "%-23s %-10s \e[91m%-5s\e[0m\n" "$outcome_message" "$outcome_amount" "[FAILED]"
  fi
}

fusor_undercloud_install "$@" 2>&1 | tee /var/log/fusor-undercloud-install.log

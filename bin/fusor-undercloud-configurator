#!/usr/bin/python
import netifaces as ni
import fcntl
import ipaddress
import os
import re
import socket
import struct
import sys
import yaml


def get_hw_addr(ifname):
    """
    Return the mac address of the given ifname
    """
    # Thanks http://stackoverflow.com/questions/159137/getting-mac-address
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    info = fcntl.ioctl(s.fileno(), 0x8927, struct.pack('256s', ifname[:15]))
    return ':'.join(['%02x' % ord(char) for char in info[18:24]])


def is_invalid_ip(ip):
    """
    Return true if the given ip is invalid.
    """
    if re.match('^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$', ip):
        return False
    return True


def is_invalid_netmask(netmask):
    """
    Return true if the netmask is invalid.
    """
    if re.match('^[0-9]{1,2}$', netmask):
        return False
    return True


def get_dhcp_range(ip_addr1, ip_addr2, network):
    """
    Return dhcp start and ending address
    """
    # Based on assigned addresses, get the 3 blocks of addresses available
    blocks = {'block1': int(ip_addr1) - int(network.network_address),
              'block2': int(ip_addr2) - int(ip_addr1),
              'block3': int(network.broadcast_address) - int(ip_addr2)}

    # Find largest block available
    largest_block = max(blocks, key=blocks.get)
    if largest_block == 'block1':
        return network.network_address + 1, ip_addr1 - 1
    elif largest_block == 'block2':
        return ip_addr1 + 1, ip_addr2 - 1
    return ip_addr2 + 1, network.broadcast_address - 1


def get_discovery_range(dhcp_start, dhcp_end):
    """
    Return starting address of discovery range
    """
    # Starting address will be the second half of the dhcp range
    difference = int(dhcp_end) - int(dhcp_start)
    half = difference / 2
    discovery_start = dhcp_start + half
    return discovery_start


def validate_all(ip_addr, netmask, undercloud_ip, gateway, network):
    """
    Validate all of the given options
    """
    if is_invalid_ip(ip_addr):
        print "Specified IP range is not valid"
        sys.exit(1)
    if is_invalid_netmask(netmask):
        print "Specified Netmask is not valid"
        sys.exit(1)
    if is_invalid_ip(undercloud_ip):
        print "Specified undercloud IP is not valid"
        sys.exit(1)
    if is_invalid_ip(gateway):
        print "Specified network gateway is not valid"
        sys.exit(1)
    if undercloud_ip == gateway:
        print "Specified network gateway can not have same IP address as the undercloud"
        sys.exit(1)
    if not ipaddress.IPv4Address(unicode(undercloud_ip)) in network:
        print "Specified undercloud IP address is not on the correct subnet"
        sys.exit(1)
    if not ipaddress.IPv4Address(unicode(gateway)) in network:
        print "Specified network gateway is not on the correct subnet"
        sys.exit(1)


def write_undercloud_conf(provisioning_nic, ip_number, undercloud_ip, netmask,
                          gateway, dhcp_start, dhcp_end, advanced, admin_password):
    """
    Write out the undercloud configuration file
    """
    sample = open('/usr/share/instack-undercloud/undercloud.conf.sample', 'r')
    conf = open('/home/stack/undercloud.conf', 'w+')

    # Get discovery range by splitting the total dhcp range in half
    discovery_start = get_discovery_range(dhcp_start, dhcp_end)
    discovery_end = dhcp_end
    dhcp_end = discovery_start - 1

    # Set vip addresses to the first two in the dhcp range and adjust the range
    undercloud_public_vip = dhcp_start
    undercloud_admin_vip = dhcp_start + 1
    dhcp_start = dhcp_start + 2

    no_prompt = {}
    no_prompt['local_interface'] = provisioning_nic
    no_prompt['undercloud_admin_password'] = admin_password
    defaults = {}
    defaults['image_path'] = '/home/stack/images'
    defaults['local_ip'] = undercloud_ip + '/' + netmask
    defaults['undercloud_public_vip'] = str(undercloud_public_vip)
    defaults['undercloud_admin_vip'] = str(undercloud_admin_vip)
    defaults['masquerade_network'] = ip_num_to_addr(ip_number) + '/' + netmask
    defaults['dhcp_start'] = str(dhcp_start)
    defaults['dhcp_end'] = str(dhcp_end)
    defaults['network_cidr'] = ip_num_to_addr(ip_number) + '/' + netmask
    defaults['network_gateway'] = gateway
    defaults['inspection_iprange'] = str(discovery_start) + ',' + \
        str(discovery_end)

    for line in iter(sample):
        line = line.rstrip()  # drop newlines
        if advanced:
            if line.startswith("#"):
                if line.startswith("# "):
                    # print only if in interactive mode, they explain the upcoming option
                    if conf_file is None:
                        print line
                else:
                    # these lines are the options (generally), parse it and ask
                    if ' = ' in line:
                        option, default = line.split(' = ')
                        option = option[1:]  # drop the '#'
                        if option in no_prompt:
                            # We already know the answer, set it and move on.
                            line = option + ' = ' + no_prompt[option]
                            print
                            conf.write(line + '\n')
                            continue

                        if option in defaults:
                            default = defaults[option]
                        if conf_file is not None:
                            try:
                                answer = answer_file["advanced"][option]
                            except KeyError:
                                print "[%s] was not found in answer file" % option
                                answer = None
                        else:
                            answer = raw_input('%s? [%s] ' % (option, default))
                        # This is stupid, but: the sample conf file contains "<None>" as
                        # the default for the password options. However, if you actually
                        # use "<None>" in an un-commented option, the osp installer
                        # blows up. It wants a blank line instead. Let's correct osp's
                        # bad examples so that this actually works.
                        if default == '<None>':
                            default = ''
                        if answer:
                            line = option + ' = ' + answer
                        else:
                            line = option + ' = ' + default
                        if conf_file is None:
                            print
        else:  # not advanced
            for option in defaults:
                if line.startswith('#%s = ' % option):
                    line = option + ' = ' + defaults[option]
            for option in no_prompt:
                if line.startswith('#%s = ' % option):
                    line = option + ' = ' + no_prompt[option]
        conf.write(line + '\n')
    sample.close()
    conf.close()


def ip_num_to_addr(ip):
    """
    Convert ip to mac addr format
    """
    octets = []
    octets.append((ip >> 24) & 0xff)
    octets.append((ip >> 16) & 0xff)
    octets.append((ip >> 8) & 0xff)
    octets.append(ip & 0xff)
    return '%d.%d.%d.%d' % tuple(octets)


def ip_addr_to_num(ip, netmask):
    """
    Convert ip addr to number
    """
    ip_number = 0
    for octet in ip_addr.split('.'):
        ip_number = (ip_number << 8) | int(octet)
    ip_max = 0xffffffff
    netmask_number = (ip_max << (32 - int(netmask))) & ip_max
    ip_number = ip_number & netmask_number
    return ip_number

# discover things about our network interfaces
nics = ni.interfaces()
nics.remove('lo')

nics_with_addresses = {}
for nic in nics:
    if ni.AF_INET in ni.ifaddresses(nic):
        nics_with_addresses[nic] = ni.ifaddresses(nic)[ni.AF_INET][0]['addr']

if len(sys.argv) > 1:  # getting nic ip addrs
    if len(nics_with_addresses) == 0:
        print "Warning: no network interfaces with IP Addresses were found. You will have to " \
              "discover this machine's IP Address yourself later."
        exit()
    if len(nics_with_addresses) > 1:
        print "Warning: multiple network interfaces with IP Addresses were found. You will have " \
              "to decide which is the correct IP Address yourself."
    for nic in nics_with_addresses.keys():
        print "%s: %s" % (nic, nics_with_addresses[nic])
    exit()


# Check if we are using an answer file or not as specified in the parent script

conf_file = os.environ.get('CONF_FILE')

if conf_file is not None:                                 # Non Interactive Mode
    with open(conf_file, 'r') as f:
        answer_file = yaml.load(f)
    gateway = answer_file["undercloud"]["gateway"]
    ip_addr = answer_file["undercloud"]["ip_addr"]
    provisioning_nic = answer_file["undercloud"]["provisioning_nic"]
    undercloud_ip = answer_file["undercloud"]["undercloud_ip"]
    advanced = answer_file["advanced"]["specify"]
    admin_password = answer_file["password"]["admin_password"]

    # Create network range based on given ip_addr
    network = ipaddress.ip_network(unicode(ip_addr), strict=False)

    ip_addr, netmask = ip_addr.split('/')

    # Set ip_addr equal to the network address in case netmask was not what we expected
    ip_addr = str(network.network_address)

    validate_all(ip_addr, netmask, undercloud_ip, gateway, network)

    ip_number = ip_addr_to_num(ip_addr, netmask)

    # Get dhcp range dependent upon gateway and undercloud addresses
    IPv4Gateway = ipaddress.IPv4Address(unicode(gateway))
    IPv4Undercloud_ip = ipaddress.IPv4Address(unicode(undercloud_ip))

    if IPv4Gateway < IPv4Undercloud_ip:
        dhcp_start, dhcp_end = get_dhcp_range(IPv4Gateway, IPv4Undercloud_ip, network)
    else:
        dhcp_start, dhcp_end = get_dhcp_range(IPv4Undercloud_ip, IPv4Gateway, network)

    write_undercloud_conf(provisioning_nic, ip_number, undercloud_ip, netmask,
                          gateway, dhcp_start, dhcp_end, advanced, admin_password)

    f = open('/tmp/network.tmp', 'w')
    f.write("GATEWAY=%s" % gateway)
    f.close
    os.system('sudo mv /tmp/network.tmp /etc/sysconfig/network')
    exit()

# let's make a guess what the provisioning nic should be:
# 1) no nics with no address, guess first nic (random)
# 2) if there's only one nic with no address, that one
# 3) multiple nics with no address, first one that starts with an 'e'
#            (like eth0 or em0)
# 4) if none of them start with an 'e', guess first one
no_address_nics = sorted(list(set(nics).difference(set(nics_with_addresses.keys()))))

if len(no_address_nics) == 0:
    guessed_provisioning_nic = nics[0]
elif len(no_address_nics) == 1:
    guessed_provisioning_nic = no_address_nics[0]
else:
    for nanic in no_address_nics:
        if nanic.startswith('e'):
            guessed_provisioning_nic = nanic
            break
    else:  # looped through, no hits
        guessed_provisioning_nic = no_address_nics[0]

selected = False
while not selected:
    i = 1
    for nic in nics:
        print "%d: %s, MAC Addr: %s" % (i, nic, get_hw_addr(nic))
        if nic == guessed_provisioning_nic:
            default = i
        i += 1
    selected = raw_input(
        'Please select the Network Interface that is connected to your provisioning network [%d]: '
        % default)
    try:
        if not selected:
            selected = default
        selected = int(selected)
        if selected > len(nics):
            raise ValueError
    except ValueError:
        # if they typed in the name of the nic...
        if selected in nics:
            selected = nics.index(selected) + 1
        else:
            selected = False
            print "I'm sorry, I didn't understand that."

provisioning_nic = nics[selected-1]

# gather required info about network
valid = False
force_no_advanced = False
while not valid:
    print
    input_str = raw_input(
        'We require a block of IP Addresses that we can assign on your network.  Please specify '
        'this block using standard slash notation: [192.168.150.0/24] ')

    if not input_str:
        input_str = '192.168.150.0/24'
    if input_str.count('/') != 1:
        print "I didn't understand that, please try again."
        continue
    ip_addr, netmask = input_str.split('/')
    if is_invalid_ip(ip_addr):
        print "I didn't understand that IP Address, please try again."
        continue
    if is_invalid_netmask(netmask):
        print "I didn't understand that netmask, please try again."
        continue
    try:
        ip_number = 0
        for octet in ip_addr.split('.'):
            ip_number = (ip_number << 8) | int(octet)
        ip_max = 0xffffffff
        netmask_number = (ip_max << (32 - int(netmask))) & ip_max
    except:
        print "Something went wrong when parsing IP Address and netmask, please try again."
        continue
    if int(netmask) > 25:
        print "Warning: if you don't specify a netmask of 25 or less we will not be able to use " \
              "defaults for additional network parameters and you will be forced to configure " \
              "them yourself."

        force_no_advanced = raw_input('Are you sure that is the appropriate netmask? [Y/n] ')
        if force_no_advanced in ['n', 'N', 'no', 'NO', 'No']:
            force_no_advanced = False
            continue
        else:
            force_no_advanced = True
    ip_number = ip_number & netmask_number
    valid = True

network = ipaddress.ip_network(unicode(input_str), strict=False)
ip_addr = str(network.network_address)
cidr_network = input_str

valid = False
undercloud_ip = False
while not valid:
    print
    undercloud_ip = raw_input(
        'Please specify the IP address of the Openstack Director. Be sure that this IP is on the '
        'correct subnet and does not interfere with the block given above. [%s] ' %
        str(network.broadcast_address - 1))

    if not undercloud_ip:
        undercloud_ip = str(network.broadcast_address - 1)
        valid = True
    elif is_invalid_ip(undercloud_ip):
        print "I didn't understand that IP Address, please try again."
        continue
    elif not ipaddress.IPv4Address(unicode(undercloud_ip)) in network:
        print "Entered IP address is not in the valid network range, please try again."
        valid = False
    else:
        valid = True

valid = False
gateway = False

# Check if our default address was taken by the undercloud IP
# If so, lets use the default we suggest for the undercloud
if undercloud_ip == str(network.network_address + 1):
    suggestion = str(network.broadcast_address - 1)
else:
    suggestion = str(network.network_address + 1)

while not valid:
    print
    gateway = raw_input(
        'Please specify the IP Address of the network gateway. This is preferably the router that '
        'leads out to the larger network but will default to this machine if not changed, making '
        'this machine a critical piece of your OpenStack infrastructure. [%s] ' %
        suggestion)

    if not gateway:
        gateway = suggestion
        valid = True
    else:
        if is_invalid_ip(gateway):
            print "The specified network gateway is not a valid IP address, please try again"
            valid = False
        elif not ipaddress.IPv4Address(unicode(gateway)) in network:
            print "Entered IP address not in the " \
                  "specified network range, please try again."
            valid = False
        elif gateway == undercloud_ip:
            print "Gateway IP address must be different than the assigned undercloud IP. " \
                  "Please try again"
            valid = False
        else:
            valid = True

done = False
while not done:
    print
    admin_password = raw_input(
        'Please specify the admin password for this undercloud. When the installation is complete '
        'you will be able to log in to this undercloud with user "admin" and this password. If you '
        'leave it blank one will be randomly generated, and you can look it up later with "hiera '
        'admin_password". [<generate>] ')

    if (not admin_password) or admin_password.isalnum():  # if blank or valid password
        done = True
    else:
        print "Passwords must be alphanumeric. Please try again."

advanced = False
if not force_no_advanced:
    print
    advanced = raw_input(
        'Would you like to specify advanced network and password configuration?  (else defaults '
        'will be accepted and installation will begin) [y/N] ')

    if advanced in ['y', 'Y', 'yes', 'YES', 'Yes']:
        advanced = True
    else:
        advanced = False

# Sanity check even though we should have caught invalid input at prompt time
validate_all(ip_addr, netmask, undercloud_ip, gateway, network)

# Get dhcp range based on gateway and undercloud addresses
IPv4Gateway = ipaddress.IPv4Address(unicode(gateway))
IPv4Undercloud_ip = ipaddress.IPv4Address(unicode(undercloud_ip))

if IPv4Gateway < IPv4Undercloud_ip:
    dhcp_start, dhcp_end = get_dhcp_range(IPv4Gateway, IPv4Undercloud_ip, network)
else:
    dhcp_start, dhcp_end = get_dhcp_range(IPv4Undercloud_ip, IPv4Gateway, network)

write_undercloud_conf(provisioning_nic, ip_number, undercloud_ip, netmask,
                      gateway, dhcp_start, dhcp_end, advanced, admin_password)

f = open('/tmp/network.tmp', 'w')
f.write("GATEWAY=%s" % gateway)
f.close
os.system('sudo mv /tmp/network.tmp /etc/sysconfig/network')
